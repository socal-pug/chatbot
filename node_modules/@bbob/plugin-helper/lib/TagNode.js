"use strict";

exports.__esModule = true;
exports["default"] = exports.TagNode = void 0;

var _char = require("./char");

var _index = require("./index");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var getTagAttrs = function getTagAttrs(tag, params) {
  var uniqAattr = (0, _index.getUniqAttr)(params);

  if (uniqAattr) {
    var tagAttr = (0, _index.attrValue)(tag, uniqAattr);

    var attrs = _extends({}, params);

    delete attrs[uniqAattr];
    var attrsStr = (0, _index.attrsToString)(attrs);
    return "" + tagAttr + attrsStr;
  }

  return "" + tag + (0, _index.attrsToString)(params);
};

var TagNode =
/*#__PURE__*/
function () {
  function TagNode(tag, attrs, content) {
    this.tag = tag;
    this.attrs = attrs;
    this.content = [].concat(content);
  }

  var _proto = TagNode.prototype;

  _proto.attr = function attr(name, value) {
    if (typeof value !== 'undefined') {
      this.attrs[name] = value;
    }

    return this.attrs[name];
  };

  _proto.append = function append(value) {
    return (0, _index.appendToNode)(this, value);
  };

  _proto.toTagNode = function toTagNode() {
    return new TagNode(this.tag.toLowerCase(), this.attrs, this.content);
  };

  _proto.toString = function toString() {
    var OB = _char.OPEN_BRAKET;
    var CB = _char.CLOSE_BRAKET;
    var isEmpty = this.content.length === 0;
    var content = this.content.reduce(function (r, node) {
      return r + node.toString();
    }, '');
    var tagAttrs = getTagAttrs(this.tag, this.attrs);

    if (isEmpty) {
      return "" + OB + tagAttrs + CB;
    }

    return "" + OB + tagAttrs + CB + content + OB + _char.SLASH + this.tag + CB;
  };

  _createClass(TagNode, [{
    key: "length",
    get: function get() {
      return (0, _index.getNodeLength)(this);
    }
  }]);

  return TagNode;
}();

exports.TagNode = TagNode;

TagNode.create = function (tag, attrs, content) {
  if (attrs === void 0) {
    attrs = {};
  }

  if (content === void 0) {
    content = [];
  }

  return new TagNode(tag, attrs, content);
};

TagNode.isOf = function (node, type) {
  return node.tag === type;
};

var _default = TagNode;
exports["default"] = _default;