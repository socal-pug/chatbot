"use strict";

exports.__esModule = true;
exports.createList = exports.unquote = exports.trimChar = exports.createCharGrabber = void 0;

var _char2 = require("@bbob/plugin-helper/lib/char");

/**
 * @typedef {Object} CharGrabber
 * @property {Function} skip
 * @property {Function} hasNext
 * @property {Function} isLast
 * @property {Function} grabWhile
 */

/**
 * Creates a grabber wrapper for source string, that helps to iterate over string char by char
 * @param {String} source
 * @param {Object} options
 * @param {Function} options.onSkip
 * @returns
 */
var createCharGrabber = function createCharGrabber(source, options) {
  // let idx = 0;
  var cursor = {
    pos: 0,
    length: source.length
  };

  var skip = function skip() {
    cursor.pos += 1;

    if (options && options.onSkip) {
      options.onSkip();
    }
  };

  var hasNext = function hasNext() {
    return cursor.length > cursor.pos;
  };

  var getRest = function getRest() {
    return source.substr(cursor.pos);
  };

  var getCurr = function getCurr() {
    return source[cursor.pos];
  };

  return {
    skip: skip,
    hasNext: hasNext,
    isLast: function isLast() {
      return cursor.pos === cursor.length;
    },

    /**
     * @param {Function} cond
     * @returns {string}
     */
    grabWhile: function grabWhile(cond) {
      var start = 0;

      if (hasNext()) {
        start = cursor.pos;

        while (hasNext() && cond(getCurr())) {
          skip();
        }
      }

      return source.substr(start, cursor.pos - start);
    },
    getNext: function getNext() {
      var nextPos = cursor.pos + 1;

      if (nextPos <= source.length - 1) {
        return source[nextPos];
      }

      return null;
    },
    getPrev: function getPrev() {
      var prevPos = cursor.pos - 1;

      if (typeof source[prevPos] !== 'undefined') {
        return source[prevPos];
      }

      return null;
    },
    getCurr: getCurr,
    getRest: getRest,

    /**
     * Grabs rest of string until it find a char
     * @param {String} char
     * @return {String}
     */
    substrUntilChar: function substrUntilChar(_char) {
      var restStr = getRest();
      var indexOfChar = restStr.indexOf(_char);

      if (indexOfChar >= 0) {
        return restStr.substr(0, indexOfChar);
      }

      return '';
    }
  };
};
/**
 * Trims string from start and end by char
 * @example
 *  trimChar('*hello*', '*') ==> 'hello'
 * @param {String} str
 * @param {String} charToRemove
 * @returns {String}
 */


exports.createCharGrabber = createCharGrabber;

var trimChar = function trimChar(str, charToRemove) {
  while (str.charAt(0) === charToRemove) {
    // eslint-disable-next-line no-param-reassign
    str = str.substring(1);
  }

  while (str.charAt(str.length - 1) === charToRemove) {
    // eslint-disable-next-line no-param-reassign
    str = str.substring(0, str.length - 1);
  }

  return str;
};
/**
 * Unquotes \" to "
 * @param str
 * @return {String}
 */


exports.trimChar = trimChar;

var unquote = function unquote(str) {
  return str.replace(_char2.BACKSLASH + _char2.QUOTEMARK, _char2.QUOTEMARK);
};
/**
 * @typedef {Object} ItemList
 * @type {Object}
 * @property {getLastCb} getLast
 * @property {flushLastCb} flushLast
 * @property {pushCb} push
 * @property {toArrayCb} toArray
 */

/**
 *
 * @param values
 * @return {ItemList}
 */


exports.unquote = unquote;

var createList = function createList(values) {
  if (values === void 0) {
    values = [];
  }

  var nodes = values;
  /**
   * @callback getLastCb
   */

  var getLast = function getLast() {
    if (Array.isArray(nodes) && nodes.length > 0 && typeof nodes[nodes.length - 1] !== 'undefined') {
      return nodes[nodes.length - 1];
    }

    return null;
  };
  /**
   * @callback flushLastCb
   * @return {*}
   */


  var flushLast = function flushLast() {
    if (nodes.length) {
      return nodes.pop();
    }

    return false;
  };
  /**
   * @callback pushCb
   * @param value
   */


  var push = function push(value) {
    return nodes.push(value);
  };
  /**
   * @callback toArrayCb
   * @return {Array}
   */


  return {
    getLast: getLast,
    flushLast: flushLast,
    push: push,
    toArray: function toArray() {
      return nodes;
    }
  };
};

exports.createList = createList;